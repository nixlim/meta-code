# golangci-lint configuration for meta-mcp-server
# Version: 1.61.0

version: 2

# Run configuration
run:
  # Timeout for analysis
  timeout: 5m
  
  # Exit code when at least one issue was found
  issues-exit-code: 1
  
  # Include test files
  tests: true
  
  # List of build tags to use
  build-tags:
    - integration
  
  # Skip directories
  skip-dirs:
    - vendor
    - third_party
    - testdata
    - examples
    - scripts
  
  # Skip files
  skip-files:
    - ".*\\.pb\\.go$"
    - ".*\\.gen\\.go$"
    - "mock_.*\\.go$"

# Output configuration
output:
  # Output format
  format: colored-line-number
  
  # Print lines of code with issue
  print-issued-lines: true
  
  # Print linter name in the end of issue text
  print-linter-name: true
  
  # Make issues output unique by line
  uniq-by-line: true
  
  # Sort results
  sort-results: true

# Linter settings
linters-settings:
  # Check for pass []any as any in variadic func(...any)
  asasalint:
    exclude:
      - "^fmt\\."
      - "^log\\."
  
  # Cyclomatic complexity
  cyclop:
    max-complexity: 15
    skip-tests: false
  
  # Cognitive complexity
  gocognit:
    min-complexity: 20
  
  # Function length
  funlen:
    lines: 100
    statements: 50
    ignore-comments: true
  
  # Line length
  lll:
    line-length: 120
    tab-width: 1
  
  # Error checking
  errcheck:
    # Exclude error checking for test files
    exclude-functions:
      - (*testing.T).Errorf
      - (*testing.T).Fatalf
      - (*testing.T).Logf
      - (*testing.T).Skipf
      - (*testing.B).Errorf
      - (*testing.B).Fatalf
      - (*testing.B).Logf
      - (*testing.B).Skipf
      - (github.com/stretchr/testify/assert.TestingT).Errorf
      - (github.com/stretchr/testify/require.TestingT).Errorf
      - (github.com/stretchr/testify/require.TestingT).FailNow
  
  # Go constants
  goconst:
    min-len: 3
    min-occurrences: 3
    ignore-tests: false
    match-constant: true
    numbers: true
    min: 3
    max: 3
  
  # Go critic
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - dupImport
      - ifElseChain
      - octalLiteral
      - whyNoLint
      - wrapperFunc
  
  # Go cyclomatic complexity (using cyclop instead, but keeping for compatibility)
  gocyclo:
    min-complexity: 15
  
  # Go imports
  goimports:
    local-prefixes: github.com/ruvnet/meta-mcp-server
  
  # Misspell
  misspell:
    locale: US
    ignore-words:
      - cancelled
      - colour
  
  # Revive (replacement for golint)
  revive:
    ignore-generated-header: true
    severity: warning
    rules:
      - name: blank-imports
      - name: context-as-argument
      - name: context-keys-type
      - name: dot-imports
      - name: error-return
      - name: error-strings
      - name: error-naming
      - name: exported
      - name: if-return
      - name: increment-decrement
      - name: var-naming
      - name: var-declaration
      - name: package-comments
      - name: range
      - name: receiver-naming
      - name: time-naming
      - name: unexported-return
      - name: indent-error-flow
      - name: errorf
      - name: empty-block
      - name: superfluous-else
      - name: unused-parameter
      - name: unreachable-code
      - name: redefines-builtin-id
  
  # Staticcheck
  staticcheck:
    checks: ["all"]
  
  
  # Unused
  unused:
    check-exported: false
  
  # Gosec
  gosec:
    excludes:
      - G104  # Audit errors not checked
      - G304  # Potential file inclusion via variable (for test files)
    exclude-generated: true

# Linters configuration
linters:
  # Enable specific linters
  enable:
    # Required linters (from task specification)
    - revive       # Replacement for deprecated golint
    - govet        # Go vet
    - errcheck     # Check for unchecked errors
    - ineffassign  # Detect ineffectual assignments
    - goconst      # Find repeated strings that could be constants
    - gocyclo      # Cyclomatic complexity
    - misspell     # Spell checker
    
    # Additional useful linters
    - asasalint    # Check for pass []any as any in variadic func(...any)
    - asciicheck   # Check for non-ASCII identifiers
    - bidichk      # Check for dangerous unicode character sequences
    - bodyclose    # Check whether HTTP response bodies are closed
    - containedctx # Check for context.Context contained in a struct
    - contextcheck # Check for missing context cancellation
    - cyclop       # Cyclomatic complexity (more configurable than gocyclo)
    - decorder     # Check declaration order and count
    - dogsled      # Check for too many blank identifiers
    - dupl         # Code clone detection
    - durationcheck # Check for two durations multiplied together
    - errchkjson   # Check for JSON marshaling errors
    - errname      # Check for errors with incorrect names
    - errorlint    # Find code that will cause problems with error wrapping
    - exhaustive   # Check exhaustiveness of enum switch statements
    - forbidigo    # Forbid specific identifiers
    - funlen       # Function length
    - gocheckcompilerdirectives # Check compiler directive comments
    - gochecknoglobals # Check for global variables
    - gochecknoinits # Check for init functions
    - gocognit     # Cognitive complexity
    # - gocritic     # The most opinionated Go source code linter (temporarily disabled due to GOROOT issue)
    - godot        # Check if comments end in a period
    - godox        # Tool for detection of TODO/BUG/FIXME comments
    - gomoddirectives # Manage go.mod directives
    - gomodguard   # Allow and block list linter for go modules
    - goprintffuncname # Check that printf-like functions are named with f at the end
    - gosec        # Security checker
    - gosmopolitan # Check for certain i18n/l10n anti-patterns
    - grouper      # Analyze expression groups
    - importas     # Enforce import aliasing
    - interfacebloat # Check for large interfaces
    - intrange     # Find places where for loops could use integer range
    - lll          # Line length limit
    - loggercheck  # Check log output for common patterns
    - maintidx     # Maintainability index
    - makezero     # Find slice declarations with non-zero initial length
    - mirror       # Reports wrong mirror patterns of bytes/strings usage
    - musttag      # Enforce field tags in (un)marshaled structs
    - nakedret     # Find naked returns
    - nestif       # Report deeply nested if statements
    - nilerr       # Find code that returns nil even if it checks that error is not nil
    - nilnil       # Check for both nil error and nil return
    - noctx        # Find HTTP requests without context.Context
    - nolintlint   # Report ill-formed or insufficient nolint directives
    - nosprintfhostport # Check for misuse of Sprintf with host:port
    - paralleltest # Detect missing usage of t.Parallel()
    - perfsprint   # Detect fmt.Sprintf uses that can be replaced with faster alternatives
    - prealloc     # Find slice declarations that could potentially be preallocated
    - predeclared  # Find code that shadows predeclared identifiers
    - promlinter   # Check Prometheus metrics naming
    - protogetter  # Report direct reads from proto message fields
    - reassign     # Check that package variables are not reassigned
    - revive       # Fast, configurable, extensible, flexible, and beautiful linter
    - rowserrcheck # Check for error handling in database/sql rows
    - sloglint     # Ensure consistent code style when using log/slog
    - spancheck    # Check for mistakes with OpenTelemetry spans
    - sqlclosecheck # Check for defer close of sql.Rows
    - staticcheck  # State of the art linter
    - tagalign     # Check that struct tags are well aligned
    - tagliatelle  # Check struct tags naming convention
    - testableexamples # Check for testable examples
    - testifylint  # Check testify assertions
    - testpackage  # Check for separate _test package
    - thelper      # Detect test helpers without t.Helper()
    - tparallel    # Detect inappropriate use of t.Parallel()
    - unconvert    # Detect unnecessary type conversions
    - unparam      # Report unused function parameters
    - unused       # Check for unused constants, variables, functions and types
    - usestdlibvars # Detect possibility to use variables from stdlib
    - wastedassign # Find wasted assignment statements
    - whitespace   # Detection of leading and trailing whitespace
    - zerologlint  # Detect wrong usage of zerolog

  # Disable all linters by default
  disable-all: true

# Issues configuration
issues:
  # Exclude specific issues
  exclude-rules:
    # Exclude errcheck for test files
    - path: _test\.go
      linters:
        - errcheck
        - dupl
        - gosec
        - funlen
        - gocognit
        - gocyclo
        - cyclop
    
    # Exclude some linters from running on test files
    - path: _test\.go
      text: "should not use dot imports"
      linters:
        - revive
    
    # Exclude lll in long lines with go:generate
    - linters:
        - lll
      source: "^//go:generate "
    
    # Exclude some revive rules
    - text: "should have a package comment"
      linters:
        - revive
    
    # Exclude cognitive complexity for main functions
    - path: main\.go
      linters:
        - gocognit
        - gocyclo
        - cyclop
  
  # Maximum count of issues with the same text
  max-issues-per-linter: 50
  
  # Maximum count of issues with the same text
  max-same-issues: 3
  
  # Show only new issues
  new: false
  
  # Fix found issues (if it's supported by the linter)
  fix: false

# Severity configuration
severity:
  # Default severity
  default: error
  
  # Minimal severity to fail
  case-sensitive: false
  
  # Rules to determine the severity
  rules:
    - linters:
        - dupl
      severity: info
    - linters:
        - goconst
      severity: warning